API - Project requests
======================

    .. Hint:: While this documentation uses dummy names like config_1, info_1, etc., you are free to choose the ID of the values yourself as long as they contain only letters from a-z, numbers 0-9 and/or the underscore

/projects
---------

GET /projects
~~~~~~~~~~~~~

    Receive a collection of projects owned by your company.

|   *Available queries*
|       page
|       items
|       fields
|       exclude
|       orderasc/orderdesc

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_links": {
            "next": {
              "href": "http://my.app-arena.com/api/v2/projects?page=2"
            },
            "self": {
              "href": "http://my.app-arena.com/api/v2/projects"
            }
          },
          "_embedded": {
            "data": {
              "1": {
                "projectId": 1,
                "name": "Project_1",
                "description": "This is a project description",
                "companyId": 1,
                "_links": {
                  "project": {
                    "href": "http://my.app-arena.com/api/v2/projects/1"
                  },
                  "company": {
                    "href": "http://my.app-arena.com/api/v2/companies/1"
                  }
                }
              },
              "2": {
                "projectId": 2,
                        .
                        .
                        .
              },
                .
                .
                .
              "N":{
                        .
                        .
                        .
              }
            }
          },
          "total_items": 100,
          "page_size": 20,
          "page_count": 5,
          "page_number": 1
        }

GET /projects/:projectId
~~~~~~~~~~~~~~~~~~~~~~~~

    Receive information about a project entity specified by :projectId

|   *Available queries*
|       fields
|       exclude

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_embedded": {
            "data": {
              "1": {
                "projectId": 1,
                "name": "Project_1 name",
                "description": "This is s project description",
                "companyId": 1,
                "_links": {
                  "project": {
                    "href": "http://my.app-arena.com/api/v2/projects/1"
                  },
                  "company": {
                    "href": "http://my.app-arena.com/api/v2/companies/1"
                  }
                }
              }
            }
          }
        }

POST /projects
~~~~~~~~~~~~~~

    Creates a new project

    .. Note:: When creating a new project, a version '1.0' and the specified language will be created as well.

|   *Available queries*
|       force

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name"      : "new project",
            "lang"      : "de_DE"
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 201,
          "data": {
            "projectId": 2,
            "companyId": 1,
            "name": "new project",
            "description": null,
            "version": {
              "versionId": 1,
              "projectId": 2,
              "companyId": 1,
              "name": "autogenerated initial version of project 'new project'.",
              "lang": "de_DE",
              "variant": 1,
              "public": false,
              "language": {
                "versionId": 1,
                "lang": "de_DE",
              }
            }
          }
        }

    .. Tip:: You can change the name of the initial version with a PUT request to /projects/:projectId/versions/1.0

    **Required data**

    name
        (string) The name of the project
    lang
        (string) The default language code_ of the version. Syntax: de_DE for Germany, de_AT for Austrian german, en_US for american english ...

        Used to set the default language of the initial project version.

    **Optional data**

    companyId
        (integer) ID of the owning company, if not specified, app will be owned by the company used for authorization
    description
        (string) A description of the project

.. _code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2

PUT /projects/:projectId
~~~~~~~~~~~~~~~~~~~~~~~~

    Alters an project entry specified by :projectId

|   *Available queries*
|       force

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name":         "new project name",
            "description":  "This is a new project description"
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "data": {
            "projectId": 2,
            "companyId": 1,
            "name": "new project name",
            "description": "This is a new project description"
          }
        }

    **Changeable fields**

    name
        (string) The name of the project
    companyId
        (integer) changes the owner of the project
    description
        (string) A description of the project

DELETE /projects/:projectId
~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Deletes an project from the database specified by :projectId

    .. Warning:: This deletes all versions including all contained settings and translations as well!

|   *Available queries*
|       none

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "message": "Project '2' deleted."
        }

/projects/:projectId/versions
-----------------------------

GET /projects/:projectId/versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Receive information about the versions of a project specified by :project_id

|   *Available queries*
|       page
|       items
|       fields
|       exclude
|       orderasc/orderdesc

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_links": {
            "self": {
              "href": "http://my.app-arena.com/api/v2/projects/1/versions"
            },
            "next": {
              "href": "http://my.app-arena.com/api/v2/projects/1/versions?page=2"
            },
          },
          "_embedded": {
            "data": {
              "1.0": {
                "versionId": 1,
                "name": "project version 1.0",
                "variant": 1,
                "public": false,
                "lang": "de_DE",
                "companyId": 1,
                "projectId": 1,
                "_links": {
                  "version": {
                    "href": "http://my.app-arena.com/api/v2/projects/1/versions/1.0"
                  },
                  "company": {
                    "href": "http://my.app-arena.com/api/v2/companies/1"
                  },
                  "project": {
                    "href": "http://my.app-arena.com/api/v2/projects/1"
                  }
                }
              },
              "1.1": {
                "versionId": 2,
                        .
                        .
                        .
              },
                .
                .
                .
              "X.Y": {
                        .
                        .
                        .
              }
            }
          },
          "total_items": 10,
          "page_size": 5,
          "page_count": 1,
          "page_number": 1
        }

GET /projects/:projectId/versions/:versionId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Receive information about a project version specified by :projectId and :versionId

    .. Note:: Use the version number as :versionId e.g.: GET /projects/1/versions/1.1

|   *Available queries*
|       fields
|       exclude

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_embedded": {
            "data": {
              "1.1": {
                "versionId": 2,
                "name": "project version 1.1",
                "variant": 1.1,
                "public": false,
                "lang": "de_DE",
                "companyId": 1,
                "projectId": 1,
                "_links": {
                  "version": {
                    "href": "http://manager.local/api/v2/projects/1/versions/1.1"
                  },
                  "company": {
                    "href": "http://manager.local/api/v2/companies/1"
                  },
                  "project": {
                    "href": "http://manager.local/api/v2/projects/1"
                  }
                }
              }
            }
          }
        }

POST /projects/:projectId/versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Create a new version for a project, specified by :projectId

    .. Note:: The default language specified in the request body will be created automatically as well!

|   *Available queries*
|       force

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name"      : "new project version",
            "lang"      : "de_DE"
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "data": {
            "versionId": 3,
            "projectId": 1,
            "companyId": 1,
            "name": "new project version",
            "lang": "de_DE",
            "variant": 1.2,
            "public": false,
            "language": {
              "versionId": 3,
              "lang": "de_DE",
            }
          }
        }

    **Required data**

    name
        (string) The name of the version
    lang
        (string) The default language of the version, if left blank, the default language of the project is used instead
        Syntax: de_DE for Germany, de_AT for Austrian german, en_US for american english ...

    **Optional data**

    variant
        (float) The desired version number. If left blank, the version number gets auto incremented
    public
        (bool) Sets the public status of the version

PUT /projects/:projectId/versions/:versionId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Alters the properties of a version, specified by :projectId and :versionId

|   *Available queries*
|       none

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name"      : "new version name"
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "data": {
            "versionId": 3,
            "projectId": 1,
            "companyId": 1,
            "name": "new version name",
            "lang": "de_DE",
            "variant": 1.2,
            "public": false
          }
        }

    **Changeable parameters**

    name
        (string) The name of the version
    public
        (bool) The public status of the version

DELETE /projects/:projectId/versions/:versionId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Deletes a version of an project from the database specified by :projectId and :versionId

    .. Warning:: This deletes all containing settings and translations of the version as well!

|   *Available queries*
|       lang

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "message": "Version '111' deleted."
        }

/projects/:projectId/configs
----------------------------

    .. Note:: For all of the following requests, the query 'version' can be used. If it is left blank the operation will automatically use the most recent version

GET /projects/:projectId/configs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Receive a collection of config values of an project specified by :projectId

|   *Available queries*
|       fields
|       exclude
|       lang
|       version

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_links": {
            "self": {
              "href": "http://manager.local/api/v2/projects/1/configs"
            }
          },
          "_embedded": {
            "data": {
              "config_1": {
                "configId": "config_1",
                "lang": "de_DE",
                "revision": 0,
                "type": "input",
                "name": "project config_1 name",
                "value": "some_value",
                "meta": {"meta_key":{"meta_inner":"meta_inner_value"}},
                "description": "This is a config value description",
                "versionId": 1,
                "_links": {
                  "version": {
                    "href": "http://my.app-arena.com/api/v2/projects/1/versions/1.0"
                  }
                }
              },
              "config_2": {
                "configId": "config_2",
                        .
                        .
                        .
              },
                .
                .
                .
              "config_N": {
                        .
                        .
                        .
              }
            }
          }
        }

GET /projects/:projectId/configs/:configID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Receive the information of a config value entity of a project specified by :templateId and :configId

|   *Available queries*
|       fields
|       exclude
|       lang

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "_embedded": {
            "data": {
              "config_1": {
                "configId": "bla",
                "lang": "de_DE",
                "revision": 0,
                "type": "input",
                "name": "bla",
                "value": "lala",
                "meta": null,
                "description": null,
                "versionId": 384,
                "_links": {
                  "version": {
                    "href": "http://manager.local/api/v2/projects/111/versions/384"
                  }
                }
              }
            }
          }
        }

POST /projects/:projectId/configs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Creates a new config value

|   *Available queries*
|       force

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name"      : "new config",
            "configId"  : "text_content",
            "type"      : "input"
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 201,
          "data": {
            "versionId": 1,
            "configId": "text_content",
            "lang": "de_DE",
            "type": "input",
            "name": "new config",
            "value": null,
            "description": null,
            "meta": null,
            "revision": 0
          }
        }

    **Required data**

    name
        (string) Sets the name of the config value
    configId
        (string) Sets the identifier of the new config value
    type
        (string) Sets the type of the config value. See `config <../api/060-config.html>`_ for more information

    **Optional data**

    value
        (string)
    description
        (string)
    meta
        see `config <../api/060-config.html>`_ meta section for information about adding information to the meta data
    lang
        (string) The language of the config value, if left out, the default language of the project is used instead.
        Syntax: de_DE for Germany, de_AT for Austrian german, en_US for american english ...


PUT /projects/:projectId/configs/:configId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Alters the properties of a project config entry specified by :projectId and :configId

|   *Available queries*
|       lang
|       version

.. http:response:: Example request body

    .. sourcecode:: js

        {
            "name":         "new config name",
            "meta_example": "meta_content",
        }

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "data": {
            "versionId": 1,
            "configId": "config_1",
            "lang": "de_DE",
            "type": "input",
            "name": "new config name",
            "value": "some_value",
            "description": null,
            "meta": "{\"meta_example\":\"meta_content\"}",
            "revision": 2
          }
        }

    **Changeable parameters**

    description
        (string)
    name
        (string)
    value
        (string)
    meta
        see `config <../api/060-config.html>`_ meta section for information about adding information to the meta data

DELETE /projects/:projectId/configs/:configId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Deletes a config entry of an project from the database specified by :projectId and :configId

|   *Available queries*
|       lang

.. http:response:: Example response body

    .. sourcecode:: js

        {
          "status": 200,
          "message": "Config 'config_1' in project '1' deleted."
        }